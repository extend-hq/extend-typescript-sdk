/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Extend from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace ParserRun {
    export interface Options {
        environment?: core.Supplier<environments.ExtendEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the x-extend-api-version header */
        extendApiVersion?: "2025-04-21";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-extend-api-version header */
        extendApiVersion?: "2025-04-21";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ParserRun {
    constructor(protected readonly _options: ParserRun.Options) {}

    /**
     * Retrieve the status and results of a parser run.
     *
     * Use this endpoint to get results for a parser run that has already completed, or to check on the status of an asynchronous parser run initiated via the [Parse File Asynchronously](https://docs.extend.ai/2025-04-21/developers/api-reference/parse-endpoints/parse-file-async) endpoint.
     *
     * If parsing is still in progress, you'll receive a response with just the status. Once complete, you'll receive the full parsed content in the response.
     *
     * @param {string} id - The unique identifier for the parser run.
     *
     *                      Example: `"parser_run_xK9mLPqRtN3vS8wF5hB2cQ"`
     * @param {Extend.ParserRunGetRequest} request
     * @param {ParserRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     * @throws {@link Extend.NotFoundError}
     *
     * @example
     *     await client.parserRun.get("parser_run_id_here")
     */
    public get(
        id: string,
        request: Extend.ParserRunGetRequest = {},
        requestOptions?: ParserRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.ParserRunGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, request, requestOptions));
    }

    private async __get(
        id: string,
        request: Extend.ParserRunGetRequest = {},
        requestOptions?: ParserRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.ParserRunGetResponse>> {
        const { responseType } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (responseType != null) {
            _queryParams["responseType"] = responseType;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `parser_runs/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version":
                    requestOptions?.extendApiVersion ?? this._options?.extendApiVersion ?? "2025-04-21",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "extend-ai",
                "X-Fern-SDK-Version": "0.0.4",
                "User-Agent": "extend-ai/0.0.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.ParserRunGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(_response.error.body as Extend.Error_, _response.rawResponse);
                case 404:
                    throw new Extend.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling GET /parser_runs/{id}.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a parser run and all associated data from Extend. This operation is permanent and cannot be undone.
     *
     * This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.
     *
     * @param {string} id - The ID of the parser run to delete.
     *
     *                      Example: `"parser_run_xK9mLPqRtN3vS8wF5hB2cQ"`
     * @param {ParserRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.NotFoundError}
     * @throws {@link Extend.InternalServerError}
     *
     * @example
     *     await client.parserRun.delete("parser_run_id_here")
     */
    public delete(
        id: string,
        requestOptions?: ParserRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.ParserRunDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: ParserRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.ParserRunDeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `parser_runs/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version":
                    requestOptions?.extendApiVersion ?? this._options?.extendApiVersion ?? "2025-04-21",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "extend-ai",
                "X-Fern-SDK-Version": "0.0.4",
                "User-Agent": "extend-ai/0.0.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.ParserRunDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Extend.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Extend.InternalServerError(
                        _response.error.body as Extend.ExtendError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling DELETE /parser_runs/{id}.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
