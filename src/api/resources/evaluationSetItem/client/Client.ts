/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Extend from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace EvaluationSetItem {
    export interface Options {
        environment?: core.Supplier<environments.ExtendEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Override the x-extend-api-version header */
        extendApiVersion?: core.Supplier<Extend.ApiVersionEnum | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-extend-api-version header */
        extendApiVersion?: Extend.ApiVersionEnum | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class EvaluationSetItem {
    constructor(protected readonly _options: EvaluationSetItem.Options) {}

    /**
     * Evaluation set items are the individual files and expected outputs that are used to evaluate the performance of a given processor in Extend. This endpoint will create a new evaluation set item in Extend, which will be used during an evaluation run.
     *
     * Best Practices for Outputs in Evaluation Sets:
     * - **Configure First, Output Later**
     *   - Always create and finalize your processor configuration before creating evaluation sets
     *   - Field IDs in outputs must match those defined in your processor configuration
     * - **Type Consistency**
     *   - Ensure output types exactly match your processor configuration
     *   - For example, if a field is configured as "currency", don't submit a simple number value
     * - **Field IDs**
     *   - Use the exact field IDs from your processor configuration
     *   - Create your own semantic IDs instead in the configs for each field/type instead of using the generated ones
     * - **Value**
     *   - Remember that all results are inside the value key of a result object, except the values within nested structures.
     *
     * @param {Extend.EvaluationSetItemCreateRequest} request
     * @param {EvaluationSetItem.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     *
     * @example
     *     await client.evaluationSetItem.create({
     *         evaluationSetId: "evaluation_set_id_here",
     *         fileId: "file_id_here",
     *         expectedOutput: {
     *             value: {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    public create(
        request: Extend.EvaluationSetItemCreateRequest,
        requestOptions?: EvaluationSetItem.RequestOptions,
    ): core.HttpResponsePromise<Extend.EvaluationSetItemCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Extend.EvaluationSetItemCreateRequest,
        requestOptions?: EvaluationSetItem.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.EvaluationSetItemCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                "evaluation_set_items",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version":
                    (await core.Supplier.get(this._options.extendApiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(
                              await core.Supplier.get(this._options.extendApiVersion),
                              { unrecognizedObjectKeys: "strip" },
                          )
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@extend-ai/sdk",
                "X-Fern-SDK-Version": "0.0.33",
                "User-Agent": "@extend-ai/sdk/0.0.33",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.EvaluationSetItemCreateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.EvaluationSetItemCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling POST /evaluation_set_items.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * If you need to change the expected output for a given evaluation set item, you can use this endpoint to update the item. This can be useful if you need to correct an error in the expected output or if the output of the processor has changed.
     *
     * @param {string} id - The ID of the evaluation set item to update. The ID will start with "evi_".
     *
     *                      Example: `"evi_kR9mNP12Qw4yTv8BdR3H"`
     * @param {Extend.EvaluationSetItemUpdateRequest} request
     * @param {EvaluationSetItem.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     * @throws {@link Extend.NotFoundError}
     *
     * @example
     *     await client.evaluationSetItem.update("evaluation_set_item_id_here", {
     *         expectedOutput: {
     *             value: {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    public update(
        id: string,
        request: Extend.EvaluationSetItemUpdateRequest,
        requestOptions?: EvaluationSetItem.RequestOptions,
    ): core.HttpResponsePromise<Extend.EvaluationSetItemUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: Extend.EvaluationSetItemUpdateRequest,
        requestOptions?: EvaluationSetItem.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.EvaluationSetItemUpdateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `evaluation_set_items/${encodeURIComponent(id)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version":
                    (await core.Supplier.get(this._options.extendApiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(
                              await core.Supplier.get(this._options.extendApiVersion),
                              { unrecognizedObjectKeys: "strip" },
                          )
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@extend-ai/sdk",
                "X-Fern-SDK-Version": "0.0.33",
                "User-Agent": "@extend-ai/sdk/0.0.33",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.EvaluationSetItemUpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.EvaluationSetItemUpdateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 404:
                    throw new Extend.NotFoundError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling POST /evaluation_set_items/{id}.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * If you have a large number of files that you need to add to an evaluation set, you can use this endpoint to create multiple evaluation set items at once. This can be useful if you have a large dataset that you need to evaluate the performance of a processor against.
     *
     * Note: you still need to create each File first using the file API.
     *
     * @param {Extend.EvaluationSetItemCreateBatchRequest} request
     * @param {EvaluationSetItem.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     *
     * @example
     *     await client.evaluationSetItem.createBatch({
     *         evaluationSetId: "evaluation_set_id_here",
     *         items: [{
     *                 fileId: "file_id_here",
     *                 expectedOutput: {
     *                     value: {
     *                         "key": "value"
     *                     }
     *                 }
     *             }]
     *     })
     */
    public createBatch(
        request: Extend.EvaluationSetItemCreateBatchRequest,
        requestOptions?: EvaluationSetItem.RequestOptions,
    ): core.HttpResponsePromise<Extend.EvaluationSetItemCreateBatchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createBatch(request, requestOptions));
    }

    private async __createBatch(
        request: Extend.EvaluationSetItemCreateBatchRequest,
        requestOptions?: EvaluationSetItem.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.EvaluationSetItemCreateBatchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                "evaluation_set_items/bulk",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version":
                    (await core.Supplier.get(this._options.extendApiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(
                              await core.Supplier.get(this._options.extendApiVersion),
                              { unrecognizedObjectKeys: "strip" },
                          )
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@extend-ai/sdk",
                "X-Fern-SDK-Version": "0.0.33",
                "User-Agent": "@extend-ai/sdk/0.0.33",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.EvaluationSetItemCreateBatchRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.EvaluationSetItemCreateBatchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(
                        serializers.Error_.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling POST /evaluation_set_items/bulk.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
