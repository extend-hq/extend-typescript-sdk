/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Extend from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as errors from "../../../../errors/index";

export declare namespace WorkflowRun {
    export interface Options {
        environment?: core.Supplier<environments.ExtendEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the x-extend-api-version header */
        extendApiVersion?: "2025-04-21";
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the x-extend-api-version header */
        extendApiVersion?: "2025-04-21";
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class WorkflowRun {
    protected readonly _options: WorkflowRun.Options;

    constructor(_options: WorkflowRun.Options = {}) {
        this._options = _options;
    }

    /**
     * List runs of a Workflow. Workflows are sequences of steps that process files and data in a specific order to achieve a desired outcome. A WorkflowRun represents a single execution of a workflow against a file.
     *
     * @param {Extend.WorkflowRunListRequest} request
     * @param {WorkflowRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     *
     * @example
     *     await client.workflowRun.list({
     *         status: "PENDING",
     *         workflowId: "workflowId",
     *         batchId: "batchId",
     *         fileNameContains: "fileNameContains",
     *         sortBy: "updatedAt",
     *         sortDir: "asc",
     *         nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
     *         maxPageSize: 1
     *     })
     */
    public list(
        request: Extend.WorkflowRunListRequest = {},
        requestOptions?: WorkflowRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.WorkflowRunListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Extend.WorkflowRunListRequest = {},
        requestOptions?: WorkflowRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.WorkflowRunListResponse>> {
        const { status, workflowId, batchId, fileNameContains, sortBy, sortDir, nextPageToken, maxPageSize } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (status != null) {
            _queryParams["status"] = status;
        }

        if (workflowId != null) {
            _queryParams["workflowId"] = workflowId;
        }

        if (batchId != null) {
            _queryParams["batchId"] = batchId;
        }

        if (fileNameContains != null) {
            _queryParams["fileNameContains"] = fileNameContains;
        }

        if (sortBy != null) {
            _queryParams["sortBy"] = sortBy;
        }

        if (sortDir != null) {
            _queryParams["sortDir"] = sortDir;
        }

        if (nextPageToken != null) {
            _queryParams["nextPageToken"] = nextPageToken;
        }

        if (maxPageSize != null) {
            _queryParams["maxPageSize"] = maxPageSize.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version": requestOptions?.extendApiVersion ?? "2025-04-21",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                "workflow_runs",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.WorkflowRunListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(_response.error.body as Extend.Error_, _response.rawResponse);
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling GET /workflow_runs.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Run a Workflow with files. A Workflow is a sequence of steps that process files and data in a specific order to achieve a desired outcome. A WorkflowRun will be created for each file processed. A WorkflowRun represents a single execution of a workflow against a file.
     *
     * @param {Extend.WorkflowRunCreateRequest} request
     * @param {WorkflowRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     *
     * @example
     *     await client.workflowRun.create({
     *         workflowId: "workflow_id_here"
     *     })
     */
    public create(
        request: Extend.WorkflowRunCreateRequest,
        requestOptions?: WorkflowRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.WorkflowRunCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Extend.WorkflowRunCreateRequest,
        requestOptions?: WorkflowRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.WorkflowRunCreateResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version": requestOptions?.extendApiVersion ?? "2025-04-21",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                "workflow_runs",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.WorkflowRunCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(_response.error.body as Extend.Error_, _response.rawResponse);
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError("Timeout exceeded when calling POST /workflow_runs.");
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Once a workflow has been run, you can check the status and output of a specific WorkflowRun.
     *
     * @param {string} workflowRunId - The ID of the WorkflowRun that was outputted after a Workflow was run through the API.
     *
     *                                 Example: `"workflow_run_8k9m-xyzAB_Pqrst-Nvw4"`
     * @param {WorkflowRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     * @throws {@link Extend.NotFoundError}
     *
     * @example
     *     await client.workflowRun.get("workflow_run_id_here")
     */
    public get(
        workflowRunId: string,
        requestOptions?: WorkflowRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.WorkflowRunGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(workflowRunId, requestOptions));
    }

    private async __get(
        workflowRunId: string,
        requestOptions?: WorkflowRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.WorkflowRunGetResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version": requestOptions?.extendApiVersion ?? "2025-04-21",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `workflow_runs/${encodeURIComponent(workflowRunId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.WorkflowRunGetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(_response.error.body as Extend.Error_, _response.rawResponse);
                case 404:
                    throw new Extend.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError(
                    "Timeout exceeded when calling GET /workflow_runs/{workflowRunId}.",
                );
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * You can update the name and metadata of an in progress WorkflowRun at any time using this endpoint.
     *
     * @param {string} workflowRunId - The ID of the WorkflowRun. This ID will start with "workflow_run". This ID can be found in the API response when creating a Workflow Run, or in the "history" tab of a workflow on the Extend platform.
     *
     *                                 Example: `"workflow_run_8k9m-xyzAB_Pqrst-Nvw4"`
     * @param {Extend.WorkflowRunUpdateRequest} request
     * @param {WorkflowRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     * @throws {@link Extend.NotFoundError}
     *
     * @example
     *     await client.workflowRun.update("workflow_run_id_here")
     */
    public update(
        workflowRunId: string,
        request: Extend.WorkflowRunUpdateRequest = {},
        requestOptions?: WorkflowRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.WorkflowRunUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(workflowRunId, request, requestOptions));
    }

    private async __update(
        workflowRunId: string,
        request: Extend.WorkflowRunUpdateRequest = {},
        requestOptions?: WorkflowRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.WorkflowRunUpdateResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version": requestOptions?.extendApiVersion ?? "2025-04-21",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `workflow_runs/${encodeURIComponent(workflowRunId)}`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.WorkflowRunUpdateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(_response.error.body as Extend.Error_, _response.rawResponse);
                case 404:
                    throw new Extend.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError(
                    "Timeout exceeded when calling POST /workflow_runs/{workflowRunId}.",
                );
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a workflow run and all associated data from Extend. This operation is permanent and cannot be undone.
     *
     * This endpoint can be used if you'd like to manage data retention on your own rather than automated data retention policies. Or make one-off deletions for your downstream customers.
     *
     * @param {string} workflowRunId - The ID of the workflow run to delete.
     *
     *                                 Example: `"workflow_run_xKm9pNv3qWsY_jL2tR5Dh"`
     * @param {WorkflowRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.NotFoundError}
     * @throws {@link Extend.InternalServerError}
     *
     * @example
     *     await client.workflowRun.delete("workflow_run_id_here")
     */
    public delete(
        workflowRunId: string,
        requestOptions?: WorkflowRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.WorkflowRunDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(workflowRunId, requestOptions));
    }

    private async __delete(
        workflowRunId: string,
        requestOptions?: WorkflowRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.WorkflowRunDeleteResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version": requestOptions?.extendApiVersion ?? "2025-04-21",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `workflow_runs/${encodeURIComponent(workflowRunId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.WorkflowRunDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Extend.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Extend.InternalServerError(
                        _response.error.body as Extend.ExtendError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError(
                    "Timeout exceeded when calling DELETE /workflow_runs/{workflowRunId}.",
                );
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Cancel a running workflow run by its ID. This endpoint allows you to stop a workflow run that is currently in progress.
     *
     * Note: Only workflow runs with a status of `PROCESSING` or `PENDING` can be cancelled. Workflow runs that are completed, failed, in review, rejected, or already cancelled cannot be cancelled.
     *
     * @param {string} workflowRunId - The ID of the workflow run to cancel.
     *
     *                                 Example: `"workflow_run_xKm9pNv3qWsY_jL2tR5Dh"`
     * @param {WorkflowRun.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Extend.BadRequestError}
     * @throws {@link Extend.UnauthorizedError}
     * @throws {@link Extend.NotFoundError}
     * @throws {@link Extend.InternalServerError}
     *
     * @example
     *     await client.workflowRun.cancel("workflow_run_id_here")
     */
    public cancel(
        workflowRunId: string,
        requestOptions?: WorkflowRun.RequestOptions,
    ): core.HttpResponsePromise<Extend.WorkflowRunCancelResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cancel(workflowRunId, requestOptions));
    }

    private async __cancel(
        workflowRunId: string,
        requestOptions?: WorkflowRun.RequestOptions,
    ): Promise<core.WithRawResponse<Extend.WorkflowRunCancelResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "x-extend-api-version": requestOptions?.extendApiVersion ?? "2025-04-21",
            }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ExtendEnvironment.Production,
                `workflow_runs/${encodeURIComponent(workflowRunId)}/cancel`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 300000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Extend.WorkflowRunCancelResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Extend.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Extend.UnauthorizedError(_response.error.body as Extend.Error_, _response.rawResponse);
                case 404:
                    throw new Extend.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Extend.InternalServerError(
                        _response.error.body as Extend.ExtendError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ExtendError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ExtendError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ExtendTimeoutError(
                    "Timeout exceeded when calling POST /workflow_runs/{workflowRunId}/cancel.",
                );
            case "unknown":
                throw new errors.ExtendError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
