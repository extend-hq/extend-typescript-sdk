/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Extend from "../../../../index";

/**
 * @example
 *     {
 *         workflowId: "workflow_id_here"
 *     }
 */
export interface WorkflowRunCreateRequest {
    /**
     * The ID of the workflow to run.
     *
     * Example: `"workflow_BMdfq_yWM3sT-ZzvCnA3f"`
     */
    workflowId: string;
    /** An array of files to process through the workflow. Either the `files` array or `rawTexts` array must be provided. Supported file types can be found [here](/product/supported-file-types). There is a limit if 50 files that can be processed at once using this endpoint. If you wish to process more at a time, consider using the [Batch Run Workflow](/developers/api-reference/workflow-endpoints/batch-run-workflow) endpoint. */
    files?: Extend.WorkflowRunFileInput[];
    /** An array of raw strings. Can be used in place of files when passing raw data. The raw data will be converted to `.txt` files and run through the workflow. If the data follows a specific format, it is recommended to use the files parameter instead. Either `files` or `rawTexts` must be provided. */
    rawTexts?: string[];
    /**
     * An optional version of the workflow that files will be run through. This number can be found when viewing the workflow on the Extend platform. When a version number is not supplied, the most recent published version of the workflow will be used. If no published versions exist, the draft version will be used. To run the `"draft"` version of a workflow, use `"draft"` as the version.
     *
     * Examples:
     * - `"3"` - Run version 3 of the workflow
     * - `"draft"` - Run the draft version of the workflow
     */
    version?: string;
    /** An optional value used to determine the relative order of WorkflowRuns when rate limiting is in effect. Lower values will be prioritized before higher values. */
    priority?: number;
    /** A optional metadata object that can be assigned to a specific WorkflowRun to help identify it. It will be returned in the response and webhooks. You can place any arbitrary `key : value` pairs in this object. */
    metadata?: Extend.JsonObject;
}
