/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Extend from "../../api/index";
import * as core from "../../core";
import { ExtractionFieldResultType } from "./ExtractionFieldResultType";
import { ExtractionFieldResultValue } from "./ExtractionFieldResultValue";
import { Insight } from "./Insight";
import { ExtractionFieldResultReference } from "./ExtractionFieldResultReference";
import { EnumOption } from "./EnumOption";

export const ExtractionFieldResult: core.serialization.ObjectSchema<
    serializers.ExtractionFieldResult.Raw,
    Extend.ExtractionFieldResult
> = core.serialization.object({
    id: core.serialization.string(),
    type: ExtractionFieldResultType,
    value: ExtractionFieldResultValue,
    schema: core.serialization.list(core.serialization.lazyObject(() => serializers.ExtractionField)).optional(),
    insights: core.serialization.list(Insight).optional(),
    references: core.serialization.list(ExtractionFieldResultReference),
    enum: core.serialization.list(EnumOption).optional(),
});

export declare namespace ExtractionFieldResult {
    export interface Raw {
        id: string;
        type: ExtractionFieldResultType.Raw;
        value: ExtractionFieldResultValue.Raw;
        schema?: serializers.ExtractionField.Raw[] | null;
        insights?: Insight.Raw[] | null;
        references: ExtractionFieldResultReference.Raw[];
        enum?: EnumOption.Raw[] | null;
    }
}
