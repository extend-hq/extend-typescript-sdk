/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";

describe("EvaluationSet", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            evaluationSets: [
                {
                    object: "evaluation_set",
                    id: "ev_2LcgeY_mp2T5yPaEuq5Lw",
                    name: "Invoice Processing Test Set",
                    description: "Q4 2023 vendor invoices for accuracy testing",
                    processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                    createdAt: "2024-03-21T15:30:00Z",
                    updatedAt: "2024-03-21T16:45:00Z",
                },
                {
                    object: "evaluation_set",
                    id: "ev_8mXp9Rq3nW2vY1kT6fH4bZ",
                    name: "Receipt Classification Test Set",
                    description: "Mixed receipt types for classification accuracy",
                    processorId: "dp_Bm8nQ2rL5pK9wF3dR7hY6",
                    createdAt: "2024-03-15T09:20:00Z",
                    updatedAt: "2024-03-20T14:30:00Z",
                },
                {
                    object: "evaluation_set",
                    id: "ev_5kN7pQ9mR2wV8xT3fG1bY",
                    name: "Contract Splitting Eval Set",
                    description: "Multi-page contracts for document splitting evaluation",
                    processorId: "dp_4vX8mL6nP9rQ2sW5kF3hT",
                    createdAt: "2024-03-10T11:45:00Z",
                    updatedAt: "2024-03-18T10:15:00Z",
                },
            ],
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        };
        server.mockEndpoint().get("/evaluation_sets").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.evaluationSet.list({
            processorId: "processor_id_here",
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        });
        expect(response).toEqual({
            success: true,
            evaluationSets: [
                {
                    object: "evaluation_set",
                    id: "ev_2LcgeY_mp2T5yPaEuq5Lw",
                    name: "Invoice Processing Test Set",
                    description: "Q4 2023 vendor invoices for accuracy testing",
                    processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                    createdAt: "2024-03-21T15:30:00Z",
                    updatedAt: "2024-03-21T16:45:00Z",
                },
                {
                    object: "evaluation_set",
                    id: "ev_8mXp9Rq3nW2vY1kT6fH4bZ",
                    name: "Receipt Classification Test Set",
                    description: "Mixed receipt types for classification accuracy",
                    processorId: "dp_Bm8nQ2rL5pK9wF3dR7hY6",
                    createdAt: "2024-03-15T09:20:00Z",
                    updatedAt: "2024-03-20T14:30:00Z",
                },
                {
                    object: "evaluation_set",
                    id: "ev_5kN7pQ9mR2wV8xT3fG1bY",
                    name: "Contract Splitting Eval Set",
                    description: "Multi-page contracts for document splitting evaluation",
                    processorId: "dp_4vX8mL6nP9rQ2sW5kF3hT",
                    createdAt: "2024-03-10T11:45:00Z",
                    updatedAt: "2024-03-18T10:15:00Z",
                },
            ],
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "My Evaluation Set",
            description: "My Evaluation Set Description",
            processorId: "processor_id_here",
        };
        const rawResponseBody = {
            success: true,
            evaluationSet: {
                object: "evaluation_set",
                id: "ev_2LcgeY_mp2T5yPaEuq5Lw",
                name: "Invoice Processing Test Set",
                description: "Q4 2023 vendor invoices for accuracy testing",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                createdAt: "2024-03-21T15:30:00Z",
                updatedAt: "2024-03-21T16:45:00Z",
            },
        };
        server
            .mockEndpoint()
            .post("/evaluation_sets")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.evaluationSet.create({
            name: "My Evaluation Set",
            description: "My Evaluation Set Description",
            processorId: "processor_id_here",
        });
        expect(response).toEqual({
            success: true,
            evaluationSet: {
                object: "evaluation_set",
                id: "ev_2LcgeY_mp2T5yPaEuq5Lw",
                name: "Invoice Processing Test Set",
                description: "Q4 2023 vendor invoices for accuracy testing",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                createdAt: "2024-03-21T15:30:00Z",
                updatedAt: "2024-03-21T16:45:00Z",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            evaluationSet: {
                object: "evaluation_set",
                id: "ev_2LcgeY_mp2T5yPaEuq5Lw",
                name: "Invoice Processing Test Set",
                description: "Q4 2023 vendor invoices for accuracy testing",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                createdAt: "2024-03-21T15:30:00Z",
                updatedAt: "2024-03-21T16:45:00Z",
            },
        };
        server
            .mockEndpoint()
            .get("/evaluation_sets/evaluation_set_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.evaluationSet.get("evaluation_set_id_here");
        expect(response).toEqual({
            success: true,
            evaluationSet: {
                object: "evaluation_set",
                id: "ev_2LcgeY_mp2T5yPaEuq5Lw",
                name: "Invoice Processing Test Set",
                description: "Q4 2023 vendor invoices for accuracy testing",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                createdAt: "2024-03-21T15:30:00Z",
                updatedAt: "2024-03-21T16:45:00Z",
            },
        });
    });
});
