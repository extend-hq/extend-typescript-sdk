/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";
import * as Extend from "../../src/api/index";

describe("File_", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            files: [
                {
                    object: "file",
                    id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                    name: "Invoices.pdf",
                    type: "PDF",
                    presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                    parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                    contents: {
                        pages: [
                            {
                                pageNumber: 1,
                                pageHeight: 10,
                                pageWidth: 10,
                                rawText: "This is the raw text of the page.",
                                markdown:
                                    "# Heading\n\nThis is a paragraph with **bold** and *italic* text.\n\n- List item 1\n- List item 2\n\n> This is a blockquote",
                                html: "<div>This is the html of the page.</div>",
                            },
                        ],
                        sheets: [{ sheetName: "Sheet1", rawText: "This is the raw text of the sheet." }],
                    },
                    metadata: {
                        pageCount: 30,
                        parentSplit: { id: "id", type: "Invoice", identifier: "other_2_9", startPage: 1, endPage: 10 },
                    },
                    createdAt: "2024-03-21T15:30:00Z",
                    updatedAt: "2024-03-21T16:45:00Z",
                    usage: { credits: 10 },
                },
            ],
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        };
        server.mockEndpoint().get("/files").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.file.list({
            nameContains: "nameContains",
            sortDir: "asc",
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
            maxPageSize: 1,
        });
        expect(response).toEqual({
            success: true,
            files: [
                {
                    object: "file",
                    id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                    name: "Invoices.pdf",
                    type: "PDF",
                    presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                    parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                    contents: {
                        pages: [
                            {
                                pageNumber: 1,
                                pageHeight: 10,
                                pageWidth: 10,
                                rawText: "This is the raw text of the page.",
                                markdown:
                                    "# Heading\n\nThis is a paragraph with **bold** and *italic* text.\n\n- List item 1\n- List item 2\n\n> This is a blockquote",
                                html: "<div>This is the html of the page.</div>",
                            },
                        ],
                        sheets: [
                            {
                                sheetName: "Sheet1",
                                rawText: "This is the raw text of the sheet.",
                            },
                        ],
                    },
                    metadata: {
                        pageCount: 30,
                        parentSplit: {
                            id: "id",
                            type: "Invoice",
                            identifier: "other_2_9",
                            startPage: 1,
                            endPage: 10,
                        },
                    },
                    createdAt: "2024-03-21T15:30:00Z",
                    updatedAt: "2024-03-21T16:45:00Z",
                    usage: {
                        credits: 10,
                    },
                },
            ],
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/files").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.file.list();
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { success: undefined, error: undefined };
        server.mockEndpoint().get("/files").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.file.list();
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            file: {
                object: "file",
                id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                name: "Invoices.pdf",
                type: "PDF",
                presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                contents: {
                    rawText: "rawText",
                    markdown: "markdown",
                    pages: [
                        {
                            pageNumber: 1,
                            pageHeight: 10,
                            pageWidth: 10,
                            rawText: "This is the raw text of the page.",
                            markdown:
                                "# Heading\n\nThis is a paragraph with **bold** and *italic* text.\n\n- List item 1\n- List item 2\n\n> This is a blockquote",
                            html: "<div>This is the html of the page.</div>",
                        },
                    ],
                    sheets: [{ sheetName: "Sheet1", rawText: "This is the raw text of the sheet." }],
                },
                metadata: {
                    pageCount: 30,
                    parentSplit: { id: "id", type: "Invoice", identifier: "other_2_9", startPage: 1, endPage: 10 },
                },
                createdAt: "2024-03-21T15:30:00Z",
                updatedAt: "2024-03-21T16:45:00Z",
                usage: { credits: 10 },
            },
        };
        server
            .mockEndpoint()
            .get("/files/file_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.file.get("file_id_here", {
            rawText: true,
            markdown: true,
            html: true,
        });
        expect(response).toEqual({
            success: true,
            file: {
                object: "file",
                id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                name: "Invoices.pdf",
                type: "PDF",
                presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                contents: {
                    rawText: "rawText",
                    markdown: "markdown",
                    pages: [
                        {
                            pageNumber: 1,
                            pageHeight: 10,
                            pageWidth: 10,
                            rawText: "This is the raw text of the page.",
                            markdown:
                                "# Heading\n\nThis is a paragraph with **bold** and *italic* text.\n\n- List item 1\n- List item 2\n\n> This is a blockquote",
                            html: "<div>This is the html of the page.</div>",
                        },
                    ],
                    sheets: [
                        {
                            sheetName: "Sheet1",
                            rawText: "This is the raw text of the sheet.",
                        },
                    ],
                },
                metadata: {
                    pageCount: 30,
                    parentSplit: {
                        id: "id",
                        type: "Invoice",
                        identifier: "other_2_9",
                        startPage: 1,
                        endPage: 10,
                    },
                },
                createdAt: "2024-03-21T15:30:00Z",
                updatedAt: "2024-03-21T16:45:00Z",
                usage: {
                    credits: 10,
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { success: undefined, error: undefined };
        server.mockEndpoint().get("/files/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.file.get("id");
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/files/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.file.get("id");
        }).rejects.toThrow(Extend.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            fileId: "file_xK9mLPqRtN3vS8wF5hB2cQ",
            message: "File data has been successfully deleted.",
        };
        server
            .mockEndpoint()
            .delete("/files/file_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.file.delete("file_id_here");
        expect(response).toEqual({
            success: true,
            fileId: "file_xK9mLPqRtN3vS8wF5hB2cQ",
            message: "File data has been successfully deleted.",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/files/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.file.delete("id");
        }).rejects.toThrow(Extend.NotFoundError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { code: "code", message: "message", requestId: "requestId", retryable: true };
        server.mockEndpoint().delete("/files/id").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.file.delete("id");
        }).rejects.toThrow(Extend.InternalServerError);
    });
});
