/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";
import * as Extend from "../../src/api/index";

describe("ExtendClient", () => {
    test("parse (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { file: {} };
        const rawResponseBody = {
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            fileId: "file_Zk9mNP12Qw4yTv8BdR3H",
            chunks: [
                {
                    object: "chunk",
                    type: "page",
                    content: "This is the content of the chunk.",
                    metadata: { pageRange: { start: 1, end: 1 } },
                    blocks: [
                        {
                            object: "block",
                            id: "id",
                            type: "text",
                            content: "content",
                            details: { type: "table_details", rowCount: 1, columnCount: 1 },
                            metadata: {},
                            polygon: [{ x: 10, y: 20 }],
                            boundingBox: { left: 10, right: 20, top: 10, bottom: 20 },
                        },
                    ],
                },
            ],
            status: "PROCESSED",
            failureReason: "failureReason",
            metrics: { processingTimeMs: 1.1, pageCount: 1.1 },
            config: {
                target: "markdown",
                chunkingStrategy: { type: "page", options: { minCharacters: 100, maxCharacters: 1000 } },
                advancedOptions: {
                    pageRotationEnabled: true,
                    agenticOcrEnabled: true,
                    pageRanges: [
                        { start: 1, end: 10 },
                        { start: 20, end: 30 },
                    ],
                },
            },
            usage: { credits: 10 },
        };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.parse({
            responseType: "json",
            file: {},
        });
        expect(response).toEqual({
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            fileId: "file_Zk9mNP12Qw4yTv8BdR3H",
            chunks: [
                {
                    object: "chunk",
                    type: "page",
                    content: "This is the content of the chunk.",
                    metadata: {
                        pageRange: {
                            start: 1,
                            end: 1,
                        },
                    },
                    blocks: [
                        {
                            object: "block",
                            id: "id",
                            type: "text",
                            content: "content",
                            details: {
                                type: "table_details",
                                rowCount: 1,
                                columnCount: 1,
                            },
                            metadata: {},
                            polygon: [
                                {
                                    x: 10,
                                    y: 20,
                                },
                            ],
                            boundingBox: {
                                left: 10,
                                right: 20,
                                top: 10,
                                bottom: 20,
                            },
                        },
                    ],
                },
            ],
            status: "PROCESSED",
            failureReason: "failureReason",
            metrics: {
                processingTimeMs: 1.1,
                pageCount: 1.1,
            },
            config: {
                target: "markdown",
                chunkingStrategy: {
                    type: "page",
                    options: {
                        minCharacters: 100,
                        maxCharacters: 1000,
                    },
                },
                advancedOptions: {
                    pageRotationEnabled: true,
                    agenticOcrEnabled: true,
                    pageRanges: [
                        {
                            start: 1,
                            end: 10,
                        },
                        {
                            start: 20,
                            end: 30,
                        },
                    ],
                },
            },
            usage: {
                credits: 10,
            },
        });
    });

    test("parse (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parse({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("parse (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { success: undefined, error: undefined };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parse({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("parse (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parse({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.PaymentRequiredError);
    });

    test("parse (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parse({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.NotFoundError);
    });

    test("parse (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { code: "code", message: "message", requestId: "requestId", retryable: true };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parse({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.UnprocessableEntityError);
    });

    test("parse (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { code: "code", message: "message", requestId: "requestId", retryable: true };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parse({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.InternalServerError);
    });

    test("parseAsync (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { file: {} };
        const rawResponseBody = {
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            status: "PROCESSING",
            failureReason: "failureReason",
        };
        server
            .mockEndpoint()
            .post("/parse/async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.parseAsync({
            file: {},
        });
        expect(response).toEqual({
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            status: "PROCESSING",
            failureReason: "failureReason",
        });
    });

    test("parseAsync (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/parse/async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parseAsync({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("parseAsync (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            file: { fileName: undefined, fileUrl: undefined, fileId: undefined },
            config: undefined,
        };
        const rawResponseBody = { success: undefined, error: undefined };
        server
            .mockEndpoint()
            .post("/parse/async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.parseAsync({
                file: {
                    fileName: undefined,
                    fileUrl: undefined,
                    fileId: undefined,
                },
                config: undefined,
            });
        }).rejects.toThrow(Extend.UnauthorizedError);
    });
});
