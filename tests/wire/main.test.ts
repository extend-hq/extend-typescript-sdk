/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";

describe("ExtendClient", () => {
    test("parse", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { file: {} };
        const rawResponseBody = {
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            fileId: "file_Zk9mNP12Qw4yTv8BdR3H",
            chunks: [
                {
                    object: "chunk",
                    type: "page",
                    content: "This is the content of the chunk.",
                    metadata: { pageRange: { start: 1, end: 1 } },
                    blocks: [
                        {
                            object: "block",
                            id: "id",
                            type: "text",
                            content: "content",
                            details: { type: "table_details", rowCount: 1, columnCount: 1 },
                            metadata: {},
                            polygon: [{ x: 10, y: 20 }],
                            boundingBox: { left: 10, right: 20, top: 10, bottom: 20 },
                        },
                    ],
                },
            ],
            status: "PROCESSED",
            failureReason: "failureReason",
            metrics: { processingTimeMs: 1.1, pageCount: 1.1 },
            config: {
                target: "markdown",
                chunkingStrategy: { type: "page", minCharacters: 100, maxCharacters: 1000 },
                advancedOptions: { pageRotationEnabled: true },
            },
        };
        server
            .mockEndpoint()
            .post("/parse")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.parse({
            file: {},
        });
        expect(response).toEqual({
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            fileId: "file_Zk9mNP12Qw4yTv8BdR3H",
            chunks: [
                {
                    object: "chunk",
                    type: "page",
                    content: "This is the content of the chunk.",
                    metadata: {
                        pageRange: {
                            start: 1,
                            end: 1,
                        },
                    },
                    blocks: [
                        {
                            object: "block",
                            id: "id",
                            type: "text",
                            content: "content",
                            details: {
                                type: "table_details",
                                rowCount: 1,
                                columnCount: 1,
                            },
                            metadata: {},
                            polygon: [
                                {
                                    x: 10,
                                    y: 20,
                                },
                            ],
                            boundingBox: {
                                left: 10,
                                right: 20,
                                top: 10,
                                bottom: 20,
                            },
                        },
                    ],
                },
            ],
            status: "PROCESSED",
            failureReason: "failureReason",
            metrics: {
                processingTimeMs: 1.1,
                pageCount: 1.1,
            },
            config: {
                target: "markdown",
                chunkingStrategy: {
                    type: "page",
                    minCharacters: 100,
                    maxCharacters: 1000,
                },
                advancedOptions: {
                    pageRotationEnabled: true,
                },
            },
        });
    });

    test("parseAsync", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { file: {} };
        const rawResponseBody = {
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            status: "PROCESSING",
            failureReason: "failureReason",
        };
        server
            .mockEndpoint()
            .post("/parse/async")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.parseAsync({
            file: {},
        });
        expect(response).toEqual({
            id: "parser_run_xK9mLPqRtN3vS8wF5hB2cQ",
            status: "PROCESSING",
            failureReason: "failureReason",
        });
    });
});
