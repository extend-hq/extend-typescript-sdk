/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";
import * as Extend from "../../src/api/index";

describe("BatchWorkflowRun", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { workflowId: "workflow_id_here", inputs: [{}] };
        const rawResponseBody = { success: true, batchId: "batch_zyx987" };
        server
            .mockEndpoint()
            .post("/workflow_runs/batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.batchWorkflowRun.create({
            workflowId: "workflow_id_here",
            inputs: [{}],
        });
        expect(response).toEqual({
            success: true,
            batchId: "batch_zyx987",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflowId: "workflowId",
            version: undefined,
            inputs: [
                { file: undefined, rawText: undefined, metadata: undefined, secrets: undefined },
                { file: undefined, rawText: undefined, metadata: undefined, secrets: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/workflow_runs/batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.batchWorkflowRun.create({
                workflowId: "workflowId",
                version: undefined,
                inputs: [
                    {
                        file: undefined,
                        rawText: undefined,
                        metadata: undefined,
                        secrets: undefined,
                    },
                    {
                        file: undefined,
                        rawText: undefined,
                        metadata: undefined,
                        secrets: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflowId: "workflowId",
            version: undefined,
            inputs: [
                { file: undefined, rawText: undefined, metadata: undefined, secrets: undefined },
                { file: undefined, rawText: undefined, metadata: undefined, secrets: undefined },
            ],
        };
        const rawResponseBody = { success: undefined, error: undefined };
        server
            .mockEndpoint()
            .post("/workflow_runs/batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.batchWorkflowRun.create({
                workflowId: "workflowId",
                version: undefined,
                inputs: [
                    {
                        file: undefined,
                        rawText: undefined,
                        metadata: undefined,
                        secrets: undefined,
                    },
                    {
                        file: undefined,
                        rawText: undefined,
                        metadata: undefined,
                        secrets: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            workflowId: "workflowId",
            version: undefined,
            inputs: [
                { file: undefined, rawText: undefined, metadata: undefined, secrets: undefined },
                { file: undefined, rawText: undefined, metadata: undefined, secrets: undefined },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/workflow_runs/batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.batchWorkflowRun.create({
                workflowId: "workflowId",
                version: undefined,
                inputs: [
                    {
                        file: undefined,
                        rawText: undefined,
                        metadata: undefined,
                        secrets: undefined,
                    },
                    {
                        file: undefined,
                        rawText: undefined,
                        metadata: undefined,
                        secrets: undefined,
                    },
                ],
            });
        }).rejects.toThrow(Extend.NotFoundError);
    });
});
