/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";

describe("ProcessorRun", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { processorId: "processor_id_here" };
        const rawResponseBody = {
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_l39vTgFDiB13heVuMQnUa",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "PROCESSING",
                output: {},
                reviewed: false,
                edited: false,
                edits: { key: { notes: "This is a note about the edit.", page: 15, fieldType: "string" } },
                type: "EXTRACT",
                config: {
                    baseProcessor: "extraction_performance",
                    baseVersion: "baseVersion",
                    extractionRules: "extractionRules",
                    schema: { key: "value" },
                    type: "EXTRACT",
                },
                files: [
                    {
                        object: "file",
                        id: "file_0QyyVL9rrOd0_WllDDCNa",
                        name: "My File",
                        type: "PDF",
                        metadata: {},
                        createdAt: "2025-05-12T21:22:37Z",
                        updatedAt: "2025-05-12T21:22:37Z",
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_l39vTgFDiB13heVuMQnUa",
            },
        };
        server
            .mockEndpoint()
            .post("/processor_runs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.create({
            processorId: "processor_id_here",
        });
        expect(response).toEqual({
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_l39vTgFDiB13heVuMQnUa",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "PROCESSING",
                output: {},
                reviewed: false,
                edited: false,
                edits: {
                    key: {
                        notes: "This is a note about the edit.",
                        page: 15,
                        fieldType: "string",
                    },
                },
                type: "EXTRACT",
                config: {
                    type: "EXTRACT",
                    baseProcessor: "extraction_performance",
                    baseVersion: "baseVersion",
                    extractionRules: "extractionRules",
                    schema: {
                        key: "value",
                    },
                },
                files: [
                    {
                        object: "file",
                        id: "file_0QyyVL9rrOd0_WllDDCNa",
                        name: "My File",
                        type: "PDF",
                        metadata: {},
                        createdAt: "2025-05-12T21:22:37Z",
                        updatedAt: "2025-05-12T21:22:37Z",
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_l39vTgFDiB13heVuMQnUa",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                processorName: "Invoice Processor",
                status: "PROCESSING",
                output: { value: { key: "value" }, metadata: { key: {} } },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: { key: "value" },
                reviewed: false,
                edited: false,
                edits: { key: { notes: "This is a note about the edit.", page: 15, fieldType: "string" } },
                type: "CLASSIFY",
                config: {
                    baseProcessor: "classifier_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                    type: "CLASSIFY",
                },
                initialOutput: { value: { key: "value" }, metadata: { key: {} } },
                reviewedOutput: { value: { key: "value" }, metadata: { key: {} } },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
            },
        };
        server
            .mockEndpoint()
            .get("/processor_runs/processor_run_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.get("processor_run_id_here");
        expect(response).toEqual({
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                processorName: "Invoice Processor",
                status: "PROCESSING",
                output: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {},
                    },
                },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: {
                    key: "value",
                },
                reviewed: false,
                edited: false,
                edits: {
                    key: {
                        notes: "This is a note about the edit.",
                        page: 15,
                        fieldType: "string",
                    },
                },
                type: "CLASSIFY",
                config: {
                    type: "CLASSIFY",
                    baseProcessor: "classifier_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                },
                initialOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {},
                    },
                },
                reviewedOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {},
                    },
                },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            documentProcessorRunId: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
            message: "Document processor run data has been successfully deleted.",
        };
        server
            .mockEndpoint()
            .delete("/processor_runs/processor_run_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.delete("processor_run_id_here");
        expect(response).toEqual({
            success: true,
            documentProcessorRunId: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
            message: "Document processor run data has been successfully deleted.",
        });
    });

    test("cancel", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "CANCELLED",
                output: { value: { key: "value" }, metadata: { key: {} } },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: { key: "value" },
                reviewed: false,
                edited: false,
                edits: { key: { notes: "This is a note about the edit.", page: 15, fieldType: "string" } },
                type: "CLASSIFY",
                config: {
                    baseProcessor: "classifier_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                    type: "CLASSIFY",
                },
                initialOutput: { value: { key: "value" }, metadata: { key: {} } },
                reviewedOutput: { value: { key: "value" }, metadata: { key: {} } },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
            },
        };
        server
            .mockEndpoint()
            .post("/processor_runs/processor_run_id_here/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.cancel("processor_run_id_here");
        expect(response).toEqual({
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "CANCELLED",
                output: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {},
                    },
                },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: {
                    key: "value",
                },
                reviewed: false,
                edited: false,
                edits: {
                    key: {
                        notes: "This is a note about the edit.",
                        page: 15,
                        fieldType: "string",
                    },
                },
                type: "CLASSIFY",
                config: {
                    type: "CLASSIFY",
                    baseProcessor: "classifier_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                },
                initialOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {},
                    },
                },
                reviewedOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {},
                    },
                },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
            },
        });
    });
});
