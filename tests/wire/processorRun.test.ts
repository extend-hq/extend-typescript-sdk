/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ExtendClient } from "../../src/Client";
import * as Extend from "../../src/api/index";

describe("ProcessorRun", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            processorRuns: [
                {
                    id: "dpr_Zk9mNP12Qw4-yTv8BdR3H",
                    status: "PROCESSED",
                    processorId: "dp_BMdfq_yWM3sT-ZzvCnA3f",
                    processorName: "Invoice Extractor",
                    processorVersionId: "dpv_Zk9mNP12Qw4-yTv8BdR3H",
                    type: "EXTRACT",
                    createdAt: "2024-03-21T15:29:55Z",
                    updatedAt: "2024-03-21T16:45:00Z",
                    usage: { credits: 3.5 },
                },
            ],
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        };
        server.mockEndpoint().get("/processor_runs").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.processorRun.list({
            status: "PENDING",
            processorId: "processorId",
            processorType: "EXTRACT",
            sourceId: "sourceId",
            source: "ADMIN",
            fileNameContains: "fileNameContains",
            sortBy: "updatedAt",
            sortDir: "asc",
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
            maxPageSize: 1,
        });
        expect(response).toEqual({
            success: true,
            processorRuns: [
                {
                    id: "dpr_Zk9mNP12Qw4-yTv8BdR3H",
                    status: "PROCESSED",
                    processorId: "dp_BMdfq_yWM3sT-ZzvCnA3f",
                    processorName: "Invoice Extractor",
                    processorVersionId: "dpv_Zk9mNP12Qw4-yTv8BdR3H",
                    type: "EXTRACT",
                    createdAt: "2024-03-21T15:29:55Z",
                    updatedAt: "2024-03-21T16:45:00Z",
                    usage: {
                        credits: 3.5,
                    },
                },
            ],
            nextPageToken: "xK9mLPqRtN3vS8wF5hB2cQ==:zWvUxYjM4nKpL7aDgE9HbTcR2mAyX3/Q+CNkfBSw1dZ=",
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/processor_runs").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.processorRun.list();
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { success: undefined, error: undefined };
        server.mockEndpoint().get("/processor_runs").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.processorRun.list();
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { processorId: "processor_id_here" };
        const rawResponseBody = {
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_l39vTgFDiB13heVuMQnUa",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "PROCESSING",
                output: {},
                reviewed: false,
                edited: false,
                edits: { key: { notes: "This is a note about the edit.", page: 15, fieldType: "string" } },
                type: "EXTRACT",
                config: {
                    type: "EXTRACT",
                    baseProcessor: "extraction_performance",
                    baseVersion: "baseVersion",
                    extractionRules: "extractionRules",
                    schema: { key: "value" },
                },
                files: [
                    {
                        object: "file",
                        id: "file_0QyyVL9rrOd0_WllDDCNa",
                        name: "My File",
                        type: "PDF",
                        metadata: {},
                        createdAt: "2025-05-12T21:22:37Z",
                        updatedAt: "2025-05-12T21:22:37Z",
                        usage: { credits: 10 },
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_l39vTgFDiB13heVuMQnUa",
                usage: { credits: 3.5 },
            },
        };
        server
            .mockEndpoint()
            .post("/processor_runs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.create({
            processorId: "processor_id_here",
        });
        expect(response).toEqual({
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_l39vTgFDiB13heVuMQnUa",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "PROCESSING",
                output: {},
                reviewed: false,
                edited: false,
                edits: {
                    key: {
                        notes: "This is a note about the edit.",
                        page: 15,
                        fieldType: "string",
                    },
                },
                type: "EXTRACT",
                config: {
                    type: "EXTRACT",
                    baseProcessor: "extraction_performance",
                    baseVersion: "baseVersion",
                    extractionRules: "extractionRules",
                    schema: {
                        key: "value",
                    },
                },
                files: [
                    {
                        object: "file",
                        id: "file_0QyyVL9rrOd0_WllDDCNa",
                        name: "My File",
                        type: "PDF",
                        metadata: {},
                        createdAt: "2025-05-12T21:22:37Z",
                        updatedAt: "2025-05-12T21:22:37Z",
                        usage: {
                            credits: 10,
                        },
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_l39vTgFDiB13heVuMQnUa",
                usage: {
                    credits: 3.5,
                },
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            processorId: "processorId",
            version: undefined,
            file: undefined,
            rawText: undefined,
            sync: undefined,
            priority: undefined,
            metadata: undefined,
            config: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/processor_runs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.create({
                processorId: "processorId",
                version: undefined,
                file: undefined,
                rawText: undefined,
                sync: undefined,
                priority: undefined,
                metadata: undefined,
                config: undefined,
            });
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            processorId: "processorId",
            version: undefined,
            file: undefined,
            rawText: undefined,
            sync: undefined,
            priority: undefined,
            metadata: undefined,
            config: undefined,
        };
        const rawResponseBody = { success: undefined, error: undefined };
        server
            .mockEndpoint()
            .post("/processor_runs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.create({
                processorId: "processorId",
                version: undefined,
                file: undefined,
                rawText: undefined,
                sync: undefined,
                priority: undefined,
                metadata: undefined,
                config: undefined,
            });
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            processorId: "processorId",
            version: undefined,
            file: undefined,
            rawText: undefined,
            sync: undefined,
            priority: undefined,
            metadata: undefined,
            config: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/processor_runs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.create({
                processorId: "processorId",
                version: undefined,
                file: undefined,
                rawText: undefined,
                sync: undefined,
                priority: undefined,
                metadata: undefined,
                config: undefined,
            });
        }).rejects.toThrow(Extend.NotFoundError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            processorId: "processorId",
            version: undefined,
            file: undefined,
            rawText: undefined,
            sync: undefined,
            priority: undefined,
            metadata: undefined,
            config: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/processor_runs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.create({
                processorId: "processorId",
                version: undefined,
                file: undefined,
                rawText: undefined,
                sync: undefined,
                priority: undefined,
                metadata: undefined,
                config: undefined,
            });
        }).rejects.toThrow(Extend.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                processorName: "Invoice Processor",
                status: "PENDING",
                output: { value: { key: "value" }, metadata: { key: { logprobsConfidence: undefined } } },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: { key: "value" },
                reviewed: false,
                edited: false,
                edits: { key: { notes: "This is a note about the edit.", page: 15, fieldType: "string" } },
                type: "CLASSIFY",
                config: {
                    type: "CLASSIFY",
                    baseProcessor: "classification_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                },
                initialOutput: { value: { key: "value" }, metadata: { key: { logprobsConfidence: undefined } } },
                reviewedOutput: { value: { key: "value" }, metadata: { key: { logprobsConfidence: undefined } } },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                        usage: { credits: 10 },
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
                usage: { credits: 3.5 },
            },
        };
        server
            .mockEndpoint()
            .get("/processor_runs/processor_run_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.get("processor_run_id_here");
        expect(response).toEqual({
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                processorName: "Invoice Processor",
                status: "PENDING",
                output: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {
                            logprobsConfidence: undefined,
                        },
                    },
                },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: {
                    key: "value",
                },
                reviewed: false,
                edited: false,
                edits: {
                    key: {
                        notes: "This is a note about the edit.",
                        page: 15,
                        fieldType: "string",
                    },
                },
                type: "CLASSIFY",
                config: {
                    type: "CLASSIFY",
                    baseProcessor: "classification_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                },
                initialOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {
                            logprobsConfidence: undefined,
                        },
                    },
                },
                reviewedOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {
                            logprobsConfidence: undefined,
                        },
                    },
                },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                        usage: {
                            credits: 10,
                        },
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
                usage: {
                    credits: 3.5,
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/processor_runs/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.processorRun.get("id");
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { success: undefined, error: undefined };
        server.mockEndpoint().get("/processor_runs/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.processorRun.get("id");
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/processor_runs/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.processorRun.get("id");
        }).rejects.toThrow(Extend.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            documentProcessorRunId: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
            message: "Document processor run data has been successfully deleted.",
        };
        server
            .mockEndpoint()
            .delete("/processor_runs/processor_run_id_here")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.delete("processor_run_id_here");
        expect(response).toEqual({
            success: true,
            documentProcessorRunId: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
            message: "Document processor run data has been successfully deleted.",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/processor_runs/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.delete("id");
        }).rejects.toThrow(Extend.NotFoundError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { code: "code", message: "message", requestId: "requestId", retryable: true };
        server
            .mockEndpoint()
            .delete("/processor_runs/id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.delete("id");
        }).rejects.toThrow(Extend.InternalServerError);
    });

    test("cancel (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "CANCELLED",
                output: { value: { key: "value" }, metadata: { key: { logprobsConfidence: undefined } } },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: { key: "value" },
                reviewed: false,
                edited: false,
                edits: { key: { notes: "This is a note about the edit.", page: 15, fieldType: "string" } },
                type: "CLASSIFY",
                config: {
                    type: "CLASSIFY",
                    baseProcessor: "classification_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                },
                initialOutput: { value: { key: "value" }, metadata: { key: { logprobsConfidence: undefined } } },
                reviewedOutput: { value: { key: "value" }, metadata: { key: { logprobsConfidence: undefined } } },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                        usage: { credits: 10 },
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
                usage: { credits: 3.5 },
            },
        };
        server
            .mockEndpoint()
            .post("/processor_runs/processor_run_id_here/cancel")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.processorRun.cancel("processor_run_id_here");
        expect(response).toEqual({
            success: true,
            processorRun: {
                object: "document_processor_run",
                id: "dpr_Xj8mK2pL9nR4vT7qY5wZ",
                processorId: "dp_SmJyN3LMx9kW_YmFTxTha",
                processorVersionId: "dpv_YrgxmNn83sAO0JChhmLpa",
                processorName: "My Processor",
                status: "CANCELLED",
                output: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {
                            logprobsConfidence: undefined,
                        },
                    },
                },
                failureReason: "failureReason",
                failureMessage: "failureMessage",
                metadata: {
                    key: "value",
                },
                reviewed: false,
                edited: false,
                edits: {
                    key: {
                        notes: "This is a note about the edit.",
                        page: 15,
                        fieldType: "string",
                    },
                },
                type: "CLASSIFY",
                config: {
                    type: "CLASSIFY",
                    baseProcessor: "classification_performance",
                    baseVersion: "3.2.0",
                    classifications: [
                        {
                            id: "my_unique_id",
                            type: "invoice",
                            description:
                                "An invoice is a document that lists the items purchased and the total amount due.",
                        },
                    ],
                    classificationRules:
                        "Rememeber, when it comes to differentiating between invoices and purchase orders, the most important thing to look for is the date of the document.",
                },
                initialOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {
                            logprobsConfidence: undefined,
                        },
                    },
                },
                reviewedOutput: {
                    value: {
                        key: "value",
                    },
                    metadata: {
                        key: {
                            logprobsConfidence: undefined,
                        },
                    },
                },
                files: [
                    {
                        object: "file",
                        id: "file_xK9mLPqRtN3vS8wF5hB2cQ",
                        name: "Invoices.pdf",
                        presignedUrl: "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
                        parentFileId: "file_Zk9mNP12Qw4yTv8BdR3H",
                        metadata: {
                            pageCount: 30,
                            parentSplit: {
                                id: "id",
                                type: "Invoice",
                                identifier: "other_2_9",
                                startPage: 1,
                                endPage: 10,
                            },
                        },
                        createdAt: "2024-03-21T15:30:00Z",
                        updatedAt: "2024-03-21T16:45:00Z",
                        usage: {
                            credits: 10,
                        },
                    },
                ],
                mergedProcessors: [
                    {
                        processorId: "dp_Xj8mK2pL9nR4vT7qY5wZ",
                        processorVersionId: "dpv_Xj8mK2pL9nR4vT7qY5wZ",
                        processorName: "Invoice Line Items Processor",
                    },
                ],
                url: "https://dashboard.extend.ai/runs/dpr_Xj8mK2pL9nR4vT7qY5wZ",
                usage: {
                    credits: 3.5,
                },
            },
        });
    });

    test("cancel (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/processor_runs/id/cancel")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.cancel("id");
        }).rejects.toThrow(Extend.BadRequestError);
    });

    test("cancel (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { success: undefined, error: undefined };
        server
            .mockEndpoint()
            .post("/processor_runs/id/cancel")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.cancel("id");
        }).rejects.toThrow(Extend.UnauthorizedError);
    });

    test("cancel (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ExtendClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/processor_runs/id/cancel")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.processorRun.cancel("id");
        }).rejects.toThrow(Extend.NotFoundError);
    });
});
